8500 "VTL_on_FPGA" R=$6000 G=$2000 G:0)=$FF ** Moni Start
8501 / "M>" 
8502 F=0 !=8560 ;=D<>"[" #=8525
8503 !=8565 H=? ** 拡張コマンド [[ [c [l [g$xxxx [d$xxxx
8505 ;=D="M" / ??=H ":" ?$=H:0) " " N=? ;=N<>$FFFF H:0)=N H=H+1 #=8505 ** Memory Write
8506 ;=D=$FFFF #=8501
8507 ;=D="D" A=H F=0 @ / ??=A E=0 @ " " ?$=A:0) A=A+1 E=E+1 @=(E>=16) E=0 F=F+1 @=(F>7) #=8501 ** Dump
8508 ;=D="G" !=8680 #=8501                   ** Go (PUSH,ret)
8509 ;=D="C" !=8600 P=0 !=8682 #=8501        ** コンパイル実行
8518 ;=D="[" / "L>" !=8580 #=8501            ** Load & Go
8519 ;=D="F" ;=H=7 !=8940 #=8501             ** 格納エリア(EPCS.Secter7)Format(初期化)
8520 ;=D="S" ;=H=7 !=8710 #=8501             ** Diskセーブ
8521 ;=D="L" !=8740       #=8501             ** Diskロード
8522 ;=D="X" !=8740 !=8554 #=8501            ** Diskロード & ゴー
8523* ;=D="R" B=7 A=H !=8980 #=8501           ** Disk固定Read(Debug用、今は使わない)
8524 #=8501
8525 ;=D<>13 #=8530
8526 ;=N=0 ;=B>0 !=8600 !=8670 #=8501        ** 0(r) Sort & List
8527 ;=B=0 #=8501                            ** 空行(改行だけ)
8528 ;=C=0 !=8601 #=8501                     ** 数字のみ(行削除)
8529 L(O)=N L(O+1)=G O=O+2
8530 ;=B=0 N=0 G(0)=N G:2)=" " G=G+3 #=8536  ** 行番号無は行番号0として登録する
8531 ;=D=" " G:0)=N/256 G:1)=N G=G+2 #=8536  ** 行番号格納
8532 ;=$<>13 #=8532                          ** コメント文は読み飛ばし
8533 #=8502
8534 G:0)=$FF ]
8536 ;=D=13 D=0 F=0
8537 ;=D<>8 #=8540
8538 ;=C>0 G=G-1 C=C-1 #=8549                ** BSで一文字削除
8539 G=G-2 G:0)=$FF #=8501                   ** 行番号も削除する
8540 ;=F>999 #=8548
8541 ;=F>0 ;=D="*" F=1000 #=8546
8542 ;=D=" " F=F+1 #=8546
8544 F=0
8546 ;=F<2 G:0)=D G=G+1 C=C+1
8548 ;=D=0 #=8550
8549 !=8565 #=8536
8550 ;=C<2 G=G-1 #=8539
8551 ;=N>0 G:0)=$FF $=10 #=8502
8552 G:-1)=" " G:0)="]" G:1)=0 G:2)=$FF G=G+2 ** コマンド(#=1)の処理
8554 !=8600 P=4 !=8682 ;=W=0 H=R+5 !=8680     ** W=0 コンパイルエラー無し
8556 N=0 !=8601 #=8501
8560 N=0 B=0 C=0
8562 !=8565 ;=D<="9" ;=D>="0" N=N*10+D-$30 B=1 #=8562
8564 ]
8565 D=$ $=D ;=D>31 ]
8566 ;=D=13 ]
8567 ;=D=8 ]
8568 #=8565           ** 非表示文字は無視
8579*  Load Bin
8580 A=R H=0                        ** Load & Go本体
8582 K=$ 
8584 ;=K<$30 ;=K=$0A A:0)=H A=A+1 #=8594
8586 ;=K<=$46 #=8589 
8587 ;=K=$47 H=R+5 #=8680 ** / "Go" ??=R / A=R $EA $C2 ** JMP R
8585 ;=K="]" ]
8589 ;=K<$3A D=K-$30 #=8592
8590 D=K-$37
8592 H=H*16+D #=8582
8594 $=$2E #=8582
8599*
8600 P=$20 F=0 J=P+2 #=8602         ** 並び替え
8601 P=$20 F=1 J=P                  ** 行削除
8602 !=8610 ;=(P+2)=O ]
8603 ;=(F=1)*(L(J)=N) K=J+2 !=8628 !=8610 ]
8604 ;=L(J-2)>=L(J) !=8620 #=8600
8606 J=J+2 ;=(J<O) #=8603
8608 ]
8609*
8610 G=$2000 L=$4800 O=P ** テーブル作成
8612 V=G:0)*256+G:1) ;=G:0)=$FF L(O)=$7FFF L(O+1)=G O=O+2 E=G+1 G=$2000 ]
8613* ?(5)=V " " ??=G
8614 L(O)=V L(O+1)=G O=O+2 G=G+2
8616 ;=G:0)>0 G=G+1 #=8616
8618 G=G+1 #=8612
8619*
8620 K=J J=P ** 移動、削除処理
8622 ;=L(K-2)=L(K) !=8628 ] ** 同一行有り
8624 ;=L(K)<L(J) !=8630 J=O ** 逆順有り
8625 J=J+2 ;=(J<O) #=8622
8626 ]
8628 A=L(K+1) B=E C=L(K-1) !=8640 ] ** 行(K)削除
8630** 前方に挿入 L(K+1)=挿入元ad L(J+1)=挿入先ad E=文末尾
8632 A=L(J+1) B=E D=L(K+3)-L(K+1) C=A+D !=8644 ** 挿入場所を空ける
8634 A=L(K+1)+D B=L(K+3)+D C=L(J+1) !=8640 ** 本体のコピー
8636 A=L(K+3)+D B=E+D C=L(K+1)+D !=8640 ** 元の本体を削除
8638 ]
8639*
8640* / "F " ??=A " " ??=B " " ??=C " " ??=D
8641 C:0)=A:0) C=C+1 A=A+1 ;=A<B #=8641 ** 前方移動 A=移動元 B=移動元最終+1 C=移動先
8642 ]
8644* / "R " ??=A " " ??=B " " ??=C " " ??=D 
8645 C=B+C-A ** 後方移動 A=移動元 B=移動元最終+1 C=移動先 -> C=移動先最終+1
8646 C=C-1 B=B-1 C:0)=B:0) B:0)=$FF ;=B>A #=8646
8648 ]
8670 W=$2000 
8672 V=W:0)*256+W:1) ;=W:0)=$FF ]
8674 / ?=V W=W+2
8676 ;=W:0)>0 $=W:0) W=W+1 #=8676
8678 W=W+1 #=8672
8680 / "Go" ??=H / A=H $EA $C2 ** Go.Addr(H)
8682 G=$2000 S=R !=9015 ]
8700* ロード/セーブ(EPCS)
8710 / "*Save*" / !=8998 B=7 
8712 !=8610 N=0 "Source= $" ??=G " - $" ??=E ** G=ソース開始 E=終了
8714 A=0 !=8970 ;=T=$5A A=1 !=8970 ;=T=$A5 A=2 #=8718
8716 / "EPCS.Err" ]
8718 !=8970 ;=T=$FF N=N+1 U=A #=8724
8720 A=A+1 ;=A<>0 #=8718
8722 "Full" ]           ** 格納エリアが無い
8724 A=A+1 !=8970 ;=T<>$FF #=8718
8726 D=G:0) ;=D=$FF "  Write= $" ??=U " - $"  ??=A / "Save.No= " ?=N ] ** End
8728 !=8960 G=G+1 A=A+1 ;=A=0 #=8722 
8730 #=8726
8740 / "*Load*" / B=7 N=1 A=2 G=$2000 ** H=Req.No N=Read.No A=EPCS.Addr G=Mem.Addr
8742 !=8970 ;=T=$FF #=8748
8744 A=A+1 ;=A<>0 #=8742
8746 "Not.Found" ]
8748 A=A+1 !=8970 ;=T=$FF #=8746
8750 ;=H<>N N=N+1 #=8742  * Noアンマッチ
8752 !=8970 G:0)=T A=A+1 G=G+1 ;=T<>$FF #=8752
8754 !=8610 "OK" ]
8900*
8940 / "*Format*" / !=8998 B=7 !=8950        ** 格納エリア初期化 **
8942 A=0   D=$5A !=8960
8944 A=A+1 D=$A5 !=8960
8946 ]
8950 <8=B <9=0      ** 消去 ** B=Bank
8952 <10=0 !=8996   * Write EN
8954 <12=0 !=8996   * Erase
8956 !=8990
8958 ]
8960 <8=B <9=A      ** 書込み ** B=Bank,A=Addr,D=Data
8962 <10=0 !=8996   * Req Write EN
8964 <11=D !=8996   * Req Write(D=Data)
8966 !=8990         * Status Check
8968 ]
8970 <8=B <9=A      ** 読出し ** B=Bank,A=Addr
8972 T=<8 !=8996    * 読出しコマンド発行 + CMD busy?
8974 T=<11          * Read Data(R=読出しデータ)
8976 ]
8980* / "Bank=" ?=B L=0,127 ;=(L&15)=0 / ??=A+L " "  ** EPCSダンプ B=Bank A=Addr
8982* <8=B <9=A+L    * Bank,Addrを設定
8984* T=<8 !=8996    * 読出しコマンド発行 + CMD busy?
8986* ?$=<11 " "     * Read Data
8988* @=L+1 ]
8990 T=<9    !=8996 * CMD  Read Status 
8992 ;=<11>0 #=8990 * Read Status(=0ならコマンド処理完了)
8994 ]
8996 ;=<10>0 #=8996 * Read Busy(=0ならコマンド発行可)
8997 ]
8998 " (Y/N) " B=$ $=B / ;=B="Y" ]
8999 $E0 ] * 呼び出し元の呼び出し元に帰る
